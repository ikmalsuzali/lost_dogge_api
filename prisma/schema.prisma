generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model animal_breeds {
  id             BigInt          @id @default(autoincrement())
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  name           String?         @db.VarChar
  description    String?         @db.VarChar
  animal_type_id BigInt?
  animal_types   animal_types?   @relation(fields: [animal_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ai_pet_breeds  ai_pet_breeds[]
  pets           pets[]
}

model animal_types {
  id            BigInt          @id @default(autoincrement())
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  name          String?         @db.VarChar
  description   String?         @db.VarChar
  animal_breeds animal_breeds[]
  pets          pets[]
}

model customers {
  id             BigInt    @id @default(autoincrement())
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  card_brand     String?   @db.VarChar
  card_last_four Int?      @db.SmallInt
  trial_ends_at  DateTime? @db.Timestamptz(6)
  user_id        String?   @db.Uuid
  users          users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pet_subscriptions {
  id                 BigInt              @id(map: "user_subscriptions_pkey") @default(autoincrement())
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  name               String?             @db.VarChar
  stripe_status      String?             @db.VarChar
  stripe_plan_id     BigInt?
  quantity           Int?                @db.SmallInt
  trial_ends_at      DateTime?           @db.Timestamptz(6)
  ends_at            DateTime?           @db.Timestamptz(6)
  pet_id             String?             @db.Uuid
  pets               pets?               @relation(fields: [pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription_plans subscription_plans? @relation(fields: [stripe_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pets {
  id                                         String              @id(map: "pets_1_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at                                 DateTime?           @default(now()) @db.Timestamptz(6)
  name                                       String?
  description                                String?
  weight                                     Int?                @db.SmallInt
  height                                     Int?                @db.SmallInt
  breed_id                                   BigInt?
  is_vaccinated                              Boolean?
  status                                     Int?                @db.SmallInt
  contact_number                             String?
  email                                      String?
  instagram                                  String?
  facebook                                   String?
  twitter                                    String?
  user_id                                    String?             @db.Uuid
  lost_date                                  DateTime?           @db.Timestamptz(6)
  found_date                                 DateTime?           @db.Timestamptz(6)
  longitude                                  Float?
  latitude                                   Float?
  gender                                     Int?                @default(0) @db.SmallInt
  address                                    String?
  animal_type_id                             BigInt?
  is_deleted                                 Boolean             @default(false)
  is_mine                                    Boolean?            @default(false)
  animal_types                               animal_types?       @relation(fields: [animal_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  animal_breeds                              animal_breeds?      @relation(fields: [breed_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                                      users?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lost_meta                                  lost_meta[]
  messages_messages_found_pet_idTopets       messages[]          @relation("messages_found_pet_idTopets")
  messages_messages_lost_pet_idTopets        messages[]          @relation("messages_lost_pet_idTopets")
  payments                                   payments[]
  pet_images                                 pet_images[]
  pet_matches_pet_matches_found_pet_idTopets pet_matches[]       @relation("pet_matches_found_pet_idTopets")
  pet_matches_pet_matches_lost_pet_idTopets  pet_matches[]       @relation("pet_matches_lost_pet_idTopets")
  pet_subscriptions                          pet_subscriptions[]
}

model subscription_plans {
  id                BigInt              @id @default(autoincrement())
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  name              String?             @db.VarChar
  price             Float?              @default(0) @db.Real
  is_recurring      Boolean?            @default(false)
  pet_subscriptions pet_subscriptions[]
}

model users {
  id                  String      @id(map: "user_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  first_name          String?     @db.VarChar
  last_name           String?     @db.VarChar
  type                Int?
  created_at          DateTime?   @default(now()) @db.Timestamptz(6)
  call_phone_number   String?     @db.VarChar
  default_measurement Boolean?
  about_me            String?     @db.VarChar
  email               String?     @db.VarChar
  user_type           Int?        @default(0) @db.SmallInt
  customers           customers[]
  pets                pets[]
}

model pet_images {
  id            BigInt          @id @default(autoincrement())
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  pet_id        String?         @db.Uuid
  url           String?         @db.VarChar
  pets          pets?           @relation(fields: [pet_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ai_pet_breeds ai_pet_breeds[]
}

model lost_meta {
  id         BigInt    @id(map: "lost_pet_dates_pkey") @default(autoincrement())
  pet_id     String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  lost_date  DateTime? @db.Timestamptz(6)
  found_date DateTime? @db.Timestamptz(6)
  longitude  Float?
  latitude   Float?
  pets       pets?     @relation(fields: [pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model messages {
  id                               String       @id(map: "_message_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at                       DateTime?    @default(now()) @db.Timestamptz(6)
  content                          String?
  pet_match_id                     String?      @db.Uuid
  lost_pet_id                      String?      @db.Uuid
  found_pet_id                     String?      @db.Uuid
  type                             Int?
  pets_messages_found_pet_idTopets pets?        @relation("messages_found_pet_idTopets", fields: [found_pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pets_messages_lost_pet_idTopets  pets?        @relation("messages_lost_pet_idTopets", fields: [lost_pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pet_matches                      pet_matches? @relation(fields: [pet_match_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model ai_pet_breeds {
  id               BigInt         @id(map: "lost_pet_breeds_pkey") @default(autoincrement())
  created_at       DateTime?      @default(now()) @db.Timestamptz(6)
  match_percentage Float?         @db.Real
  pet_image_id     BigInt?
  breed_id         BigInt?
  animal_breeds    animal_breeds? @relation(fields: [breed_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pet_images       pet_images?    @relation(fields: [pet_image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pet_matches {
  id                                  String     @id(map: "_pet_matches_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  match_percentage                    Float?     @db.Real
  created_at                          DateTime?  @default(now()) @db.Timestamptz(6)
  found_pet_id                        String?    @db.Uuid
  lost_pet_id                         String?    @db.Uuid
  distance                            Float?     @db.Real
  type                                Int?       @db.SmallInt
  pets_pet_matches_found_pet_idTopets pets?      @relation("pet_matches_found_pet_idTopets", fields: [found_pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pets_pet_matches_lost_pet_idTopets  pets?      @relation("pet_matches_lost_pet_idTopets", fields: [lost_pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages                            messages[]
}

model payments {
  id                       String           @id(map: "payments_2_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at               DateTime?        @default(now()) @db.Timestamptz(6)
  status                   Int?             @default(0) @db.SmallInt
  pet_id                   String?          @db.Uuid
  quantity                 Int?
  start_date               DateTime?        @db.Timestamptz(6)
  end_date                 DateTime?        @db.Timestamptz(6)
  stripe_product_id        String?          @db.Uuid
  receipt_url              String?
  stripe_payment_intent_id String?
  adset_id                 String?          @db.Uuid
  fb_adsets                fb_adsets?       @relation(fields: [adset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pets                     pets?            @relation(fields: [pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stripe_products          stripe_products? @relation(fields: [stripe_product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stripe_products {
  id              String     @id(map: "stripe_products_pkey1") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  name            String?
  description     String?
  stripe_price_id String?
  key             String?    @default("")
  quantity        Int?       @db.SmallInt
  payments        payments[]
}

model fb_adsets {
  id                String        @id(map: "fb_adset_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  optimization_goal String?       @db.VarChar
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  billing_event     String?       @db.VarChar
  daily_budget      BigInt?
  campaign_id       String?       @db.Uuid
  targeting         Json?         @db.Json
  status            String?       @db.VarChar
  start_time        DateTime?     @db.Timestamptz(6)
  fb_adset_id       String?       @db.VarChar
  fb_ad_id          String?       @db.VarChar
  reach_count       Decimal?      @db.Decimal
  impression_count  Decimal?      @db.Decimal
  fb_ad_creative_id String?       @db.VarChar
  status_check_date DateTime?     @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  fb_campaigns      fb_campaigns? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments          payments[]
}

model fb_campaigns {
  id             String      @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at     DateTime?   @default(now()) @db.Timestamptz(6)
  name           String?     @db.VarChar
  objective      String?     @db.VarChar
  status         String?     @db.VarChar
  fb_campaign_id String?     @db.VarChar
  fb_adsets      fb_adsets[]
}
